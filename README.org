* Build Action Scheduler

  This projects implements a build action scheduler that can execute tasks in
  parallel.

  The scheduler works by:
  1. Identifying paths from all leaf actions (actions with no dependencies) to
     root actions (actions that aren't depended on)
  2. Putting these paths in a priority queue that uses the total path duration
     as the priority
  3. Iterating on getting paths from the priority queue (paths with higher total
     duration come first) and checking if their head action has no pending
     dependencies (i.e., they either have no dependencies or their dependencies
     have been executed). These are considered ready to execute
  4. Adding ready actions to a queue, updating the priority queue paths when
     taking their head action
  5. Whenever an action finishes executing, schedule as many actions as possible
     from the queue, based on the current scheduler capacity (dictated by
     parallelism)
  6. If the scheduler is at full capacity, poll it periodically

  This algorithm makes sure that the scheduler will at every iteration try to
  execute actions from the paths with the largest durations (the most critical
  paths), guaranteeing that given a high parallelism, the wall duration for the
  full scheduler execution will be similar to the critical path duration.

  There's a sketch of the algorithm included in =data/algorithm_sketch.png=.

  [[file:data/algorithm_sketch.png]]

  It shows:
  1. The action tree (same for example below). Leaf nodes have no dependencies.
  2. The initial action pending dependencies counts
  3. The priority queue with all possible paths from leaf to root actions.
  4. Checking the head of paths in the priority queue to see if they have zero
     pending dependencies. If so, add them to the "ready queue".
  5. Scheduler picks actions from the ready queue and updates the pending
     dependencies count status.
  6. Iterate.

** Example execution
   The scheduler application takes action files as input:
   
   #+begin_src bash
   cat <<EOF > test_actions_0.json
   [
     {
       "sha1": "G",
       "duration": 6,
       "dependencies": []
     },
     {
       "sha1": "F",
       "duration": 5,
       "dependencies": []
     },
     {
       "sha1": "E",
       "duration": 1,
       "dependencies": []
     },
     {
       "sha1": "D",
       "duration": 1,
       "dependencies": [
         "F",
         "G"
       ]
     },
     {
       "sha1": "B",
       "duration": 3,
       "dependencies": [
         "D",
         "E"
       ]
     },
     {
       "sha1": "C",
       "duration": 10,
       "dependencies": []
     },
     {
       "sha1": "A",
       "duration": 4,
       "dependencies": [
         "B",
         "C"
       ]
     }
   ]
   EOF
   #+end_src

   Run the scheduler application CLI and give it the actions file created above:

   #+begin_src bash :results code raw
   bazel run //org_fraggles/build_action_scheduler:build_action_scheduler_bin \
         -- \
         --parallelism 5 \
         --actions-file test_actions_0.json 
   #+end_src

   Scheduler status updates will be streamed to stderr:

   #+begin_src text
   2024-07-30T01:14:01Z INFO 1 actions running: C
   2024-07-30T01:14:01Z INFO 2 actions running: G, C
   2024-07-30T01:14:01Z INFO 3 actions running: G, C, F
   2024-07-30T01:14:01Z INFO 4 actions running: E, G, C, F
   2024-07-30T01:14:01Z INFO 4 actions running: E, G, C, F
   2024-07-30T01:14:02Z INFO 4 actions running: E, G, C, F
   2024-07-30T01:14:02Z INFO 3 actions running: G, C, F | actions done: E
   2024-07-30T01:14:03Z INFO 3 actions running: G, C, F | actions done: E
   2024-07-30T01:14:04Z INFO 3 actions running: G, C, F | actions done: E
   2024-07-30T01:14:05Z INFO 3 actions running: G, C, F | actions done: E
   2024-07-30T01:14:06Z INFO 2 actions running: G, C | actions done: E, F
   2024-07-30T01:14:06Z INFO 2 actions running: G, C | actions done: E, F
   2024-07-30T01:14:07Z INFO 1 actions running: C | actions done: E, F, G
   2024-07-30T01:14:07Z INFO 1 actions running: C | actions done: E, F, G
   2024-07-30T01:14:07Z INFO 2 actions running: D, C | actions done: E, F, G
   2024-07-30T01:14:08Z INFO 2 actions running: D, C | actions done: E, F, G
   2024-07-30T01:14:08Z INFO 1 actions running: C | actions done: E, F, G, D
   2024-07-30T01:14:09Z INFO 1 actions running: C | actions done: E, F, G, D
   2024-07-30T01:14:09Z INFO 2 actions running: B, C | actions done: E, F, G, D
   2024-07-30T01:14:10Z INFO 2 actions running: B, C | actions done: E, F, G, D
   2024-07-30T01:14:11Z INFO 1 actions running: B | actions done: E, F, G, D, C
   2024-07-30T01:14:11Z INFO 1 actions running: B | actions done: E, F, G, D, C
   2024-07-30T01:14:12Z INFO 0 actions running | actions done: E, F, G, D, C, B
   2024-07-30T01:14:12Z INFO 1 actions running: A | actions done: E, F, G, D, C, B
   2024-07-30T01:14:16Z INFO 0 actions running | actions done: E, F, G, D, C, B, A
   #+end_src

   And a report will be printed to stdout, showing:
   1. The =action_execution_history= based on action execution start times
   2. The critical path and its duration

   #+begin_src text
   {
     "action_execution_history": [
       "C",
       "G",
       "F",
       "E",
       "D",
       "B",
       "A"
     ],
     "critical_path": {
       "duration": 14,
       "path": [
         "C",
         "A"
       ]
     }
   }
   #+end_src

   Changing =parallelism= to =1= will show a different stream of scheduler
   status updates:

   #+begin_src bash :results code raw
   bazel run //org_fraggles/build_action_scheduler:build_action_scheduler_bin \
         -- \
         --parallelism 1 \
         --actions-file test_actions_0.json 
   #+end_src

   #+begin_src text
   2024-07-30T01:16:48Z INFO 1 actions running: C
   2024-07-30T01:16:48Z INFO 1 actions running: C
   2024-07-30T01:16:49Z INFO 1 actions running: C
   2024-07-30T01:16:50Z INFO 1 actions running: C
   2024-07-30T01:16:51Z INFO 1 actions running: C
   2024-07-30T01:16:52Z INFO 1 actions running: C
   2024-07-30T01:16:53Z INFO 1 actions running: C
   2024-07-30T01:16:54Z INFO 1 actions running: C
   2024-07-30T01:16:55Z INFO 1 actions running: C
   2024-07-30T01:16:56Z INFO 1 actions running: C
   2024-07-30T01:16:57Z INFO 1 actions running: C
   2024-07-30T01:16:58Z INFO 0 actions running | actions done: C
   2024-07-30T01:16:58Z INFO 0 actions running | actions done: C
   2024-07-30T01:16:58Z INFO 1 actions running: G | actions done: C
   2024-07-30T01:16:59Z INFO 1 actions running: G | actions done: C
   2024-07-30T01:17:00Z INFO 1 actions running: G | actions done: C
   2024-07-30T01:17:01Z INFO 1 actions running: G | actions done: C
   2024-07-30T01:17:02Z INFO 1 actions running: G | actions done: C
   2024-07-30T01:17:03Z INFO 1 actions running: G | actions done: C
   2024-07-30T01:17:04Z INFO 0 actions running | actions done: C, G
   2024-07-30T01:17:04Z INFO 1 actions running: F | actions done: C, G
   2024-07-30T01:17:04Z INFO 1 actions running: F | actions done: C, G
   2024-07-30T01:17:05Z INFO 1 actions running: F | actions done: C, G
   2024-07-30T01:17:06Z INFO 1 actions running: F | actions done: C, G
   2024-07-30T01:17:07Z INFO 1 actions running: F | actions done: C, G
   2024-07-30T01:17:08Z INFO 1 actions running: F | actions done: C, G
   2024-07-30T01:17:09Z INFO 0 actions running | actions done: C, G, F
   2024-07-30T01:17:09Z INFO 1 actions running: E | actions done: C, G, F
   2024-07-30T01:17:09Z INFO 1 actions running: E | actions done: C, G, F
   2024-07-30T01:17:10Z INFO 0 actions running | actions done: C, G, F, E
   2024-07-30T01:17:10Z INFO 0 actions running | actions done: C, G, F, E
   2024-07-30T01:17:10Z INFO 1 actions running: D | actions done: C, G, F, E
   2024-07-30T01:17:11Z INFO 1 actions running: D | actions done: C, G, F, E
   2024-07-30T01:17:11Z INFO 0 actions running | actions done: C, G, F, E, D
   2024-07-30T01:17:12Z INFO 0 actions running | actions done: C, G, F, E, D
   2024-07-30T01:17:12Z INFO 1 actions running: B | actions done: C, G, F, E, D
   2024-07-30T01:17:13Z INFO 1 actions running: B | actions done: C, G, F, E, D
   2024-07-30T01:17:14Z INFO 1 actions running: B | actions done: C, G, F, E, D
   2024-07-30T01:17:15Z INFO 0 actions running | actions done: C, G, F, E, D, B
   2024-07-30T01:17:15Z INFO 1 actions running: A | actions done: C, G, F, E, D, B
   2024-07-30T01:17:19Z INFO 0 actions running | actions done: C, G, F, E, D, B, A
   #+end_src

   But the same report:

   #+begin_src json
   {
     "action_execution_history": [
       "C",
       "G",
       "F",
       "E",
       "D",
       "B",
       "A"
     ],
     "critical_path": {
       "duration": 14,
       "path": [
         "C",
         "A"
       ]
     }
   }
   #+end_src

   I also added a more complex actions file in =data/complex_actions.json=. Run
   it with:

   #+begin_src bash :results code raw
   bazel run //org_fraggles/build_action_scheduler:build_action_scheduler_bin \
         -- \
         --parallelism 50 \
         --actions-file data/complex_actions.json
   #+end_src

** Run tests
   #+begin_src bash :results code raw
   make bazel_python_test
   #+end_src
